import Head from 'next/head';
import { useUserFeedQuery } from '@/graphql/__generated__/graphql';
import { CommonLayout } from '@/components/layout/common-layout';
import { ReactElement, ReactNode } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import MainContainer from '@/components/common/main-container';
import ArtworkFeed from '@/components/artwork/artwork-feed';
import useInfiniteScroll from 'react-infinite-scroll-hook';

export default function Home() {
    const { data, loading, error, fetchMore, refetch } = useUserFeedQuery({
        notifyOnNetworkStatusChange: true,
        // fetchPolicy: 'network-only',
        nextFetchPolicy: 'cache-first',
    });

    const [sentryRef] = useInfiniteScroll({
        loading,
        hasNextPage: data?.userFeed.hasMore ?? true,
        onLoadMore: () =>
            fetchMore({
                variables: {
                    limit: 10,
                    ...(data?.userFeed.artworks && {
                        cursor: parseInt(data.userFeed.artworks[data.userFeed.artworks.length - 1].id),
                    }),
                },
            }),
        // When there is an error, we stop infinite loading.
        // It can be reactivated by setting "error" state as undefined.
        disabled: !!error,
        // `rootMargin` is passed to `IntersectionObserver`.
        // We can use it to trigger 'onLoadMore' when the sentry comes near to become
        // visible, instead of becoming fully visible on the screen.
        rootMargin: '0px 0px 400px 0px',
    });

    return (
        <>
            <Head>
                <title>Home</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <MainContainer>
                {!data && loading && <div>ARTWORKS LOADING</div>}
                <button
                    className="w-26 mx-auto font-bold bg-[#B13E77] text-[#f4ead5] px-2 py-1 mb-2 rounded-md"
                    onClick={() => refetch()}
                >
                    Check For New Artworks
                </button>
                {data?.userFeed.artworks &&
                    !error &&
                    data?.userFeed.artworks.map((artwork) => (
                        <ArtworkFeed
                            key={artwork.id}
                            title={artwork.title}
                            id={artwork.id}
                            imageUrls={artwork.imageUrls}
                            description={artwork.description}
                            likesCount={artwork.likesCount}
                            createdAt={artwork.createdAt}
                            uploader={artwork.uploader}
                            recentComments={artwork.recentComments!}
                            isLikedByLoggedInUser={artwork.isLikedByLoggedInUser}
                        />
                    ))}
                {/* Eventually will be moved into an infinite scroll component */}
                {data && data?.userFeed.hasMore && (
                    <button
                        ref={sentryRef}
                        className="w-26 mx-auto font-bold text-black bg-pink-300 px-2 py-1 rounded-md invisible"
                        onClick={() => {
                            fetchMore({
                                variables: {
                                    limit: 10,
                                    cursor: parseInt(data.userFeed.artworks[data.userFeed.artworks.length - 1].id),
                                },
                            });
                        }}
                    >
                        Load More Artworks
                    </button>
                )}
            </MainContainer>
        </>
    );
}

Home.getLayout = (page: ReactElement): ReactNode => (
    <CommonLayout>
        <MainLayout>{page}</MainLayout>
    </CommonLayout>
);
